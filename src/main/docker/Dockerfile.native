####
# This Dockerfile is used in order to build a container that runs the Quarkus application in native (no JVM) mode
#
# Before building the container image run:
#
# ./mvnw package -Pnative -Dquarkus.native.container-build=true -DskipTests=true
#
# Then, build the image with:
#
# docker build -f src/main/docker/Dockerfile.native -t quarkus/getting-started .
# docker buildx â€”-platform linux/amd64,linux/arm64,linux/arm/v7 -f src/main/docker/Dockerfile.native -t quarkus/getting-started .
# docker buildx build --file Dockerfile.native --platform linux/amd64,linux/arm64,linux/arm/v7 --tag quarkus-getting-started-buildx --load ./
#
# Then run the container using:
#
# docker run -dit --name quarkus-getting-started -p 8082:8082 quarkus/getting-started
# docker run -dit --name quarkus-getting-started -p 8082:8080 registry.unipass.vn/quarkus/getting-started
#
###
FROM registry.access.redhat.com/ubi8/ubi-minimal:8.3
WORKDIR /work/
RUN chown 1001 /work \
    && chmod "g+rwX" /work \
    && chown 1001:root /work
COPY --chown=1001:root target/*-runner /work/application

EXPOSE 8082
USER 1001

CMD ["./application", "-Dquarkus.http.host=0.0.0.0"]

#FROM registry.access.redhat.com/ubi8/ubi-minimal as nativebuilder
#RUN mkdir -p /tmp/ssl \
#&& cp /usr/lib64/libstdc++.so.6.0.25 /tmp/ssl/libstdc++.so.6 \
#&& cp /usr/lib64/libgcc_s-8-20191121.so.1 /tmp/ssl/libgcc_s.so.1 \
#&& cp /usr/lib64/libz.so.1 /tmp/ssl/libz.so.1
#
#FROM gcr.io/distroless/base
#COPY --from=nativebuilder /tmp/ssl/ /
#ENV LD_LIBRARY_PATH /
#
#COPY target/*-runner /application
#EXPOSE 8080
#CMD ["./application", "-Dquarkus.http.host=0.0.0.0"]
